substitutions:
  device_name: modbus-spy-new-sw-dev
  friendly_name: Modbus Spy New SW Dev
  time_timezone: "Europe/Amsterdam"

esphome:
  name: ${device_name}
  friendly_name: ${friendly_name}

esp32:
  board: esp32dev
  framework:
    type: arduino

external_components:
  - source:
    #   type: git
    #   url: https://github.com/pdjong/daalderop-esphome
    #   ref: main
    # refresh: 0s
      type: local
      path: components
    
# Enable logging
logger:
  # baud_rate: 115200
  level: INFO 
  logs:
    sensor: INFO
    ModbusSpy: INFO
# Enable Home Assistant API
api:
#   encryption:
#     key: "PsKaCvrdD8AjEdWsv7b32V2KGBf7kicJAqhE+/zU1H8="
ota:
  password: "e5264b2500ef5b812b82d4342c5a60f6"
wifi:
# Next two lines for building locally with ESPHome
  ssid: "?"
  password: "?"
# Next two lines for building on Home Assistant OS, ESPHome
#  ssid: !secret wifi_ssid
#  password: !secret wifi_password
  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: "modbus-spy-new-sw-dev"
    password: "MHcfSqvZc6fe"

# Status LED of ESP
status_led:
  pin: 
    number: 33

uart:
  baud_rate: 19200
  rx_pin: 32
  parity: ODD

modbus_spy:
  id: modbusspy
  
sensor:
  - platform: modbus_spy
    name: "Inside Temperature"
    device_address: 11
    register_address: 41200

  - platform: uptime
    id: sensor_uptime
  - platform: template
    id: sensor_uptime_timestamp
    name: "Uptime"
    device_class: "timestamp"
    accuracy_decimals: 0
    update_interval: never
    lambda: |-
      static float timestamp = (
        id(time_homeassistant).utcnow().timestamp - id(sensor_uptime).state
      );
      return timestamp;
  - platform: wifi_signal # Reports the WiFi signal strength/RSSI in dB
    name: "Modbus Spy WiFi Signal dB"
    id: wifi_signal_db
    update_interval: 20s
  - platform: copy # Reports the WiFi signal strength in %
    source_id: wifi_signal_db
    name: "Modbus Spy WiFi Signal Percent"
    filters:
      - lambda: return min(max(2 * (x + 100.0), 0.0), 100.0);
    unit_of_measurement: " %"

# binary_sensor:
#   - platform: template
#     name: modbus_spy_defrost
#     lambda: |-
#       return (id(decode20).state == 68 && (id(decode24).state == 1 || id(decode25).state == 2048)) || (id(decode20).state == 4);
              

time:
  - platform: homeassistant
    id: time_homeassistant
    timezone: "Europe/Amsterdam"
    on_time_sync:
      - component.update: sensor_uptime_timestamp      

# text_sensor:
#   - platform: template
#     id: three_way_valve_text
#     name: modbus_spy_three_way_valve_text
